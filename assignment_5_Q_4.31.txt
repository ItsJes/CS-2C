#include <gtest/gtest.h>
#include <stdio.h>
#include <stdlib.h>

template <typename Comparable>
class BinarySearchTree
{
public:
	BinarySearchTree() { root = NULL; }
	BinarySearchTree(const BinarySearchTree & rhs) { root = clone(rhs.root); }
	BinarySearchTree(BinarySearchTree<Comparable> && rhs);
	~BinarySearchTree() { makeEmpty(); }

	const Comparable & findMin() const;
	const Comparable & findMax() const;

	bool contains(const Comparable & x) const { return contains(x, root) };
	bool isEmpty() const { return root == NULL; }

	void printTree(std::ostream & out = std::cout) const;
	void makeEmpty() { makeEmpty(root); }
	void insert(const Comparable & x) { insert(x, root); }
	void insert(Comparable && x) { insert(x, root); }
	void remove(const Comparable & x) { BinaryNode::remove(x, root); }

	BinarySearchTree & operator=(const BinarySearchTree & rhs);
	BinarySearchTree & operator=(BinarySearchTree && rhs);

	struct node
	{
	Comparable data;
	struct node*left;
	struct node*right;
	};
	void insert(const Comparable & x, node * & t);
	void insert(Comparable && x, node * & t);
	void remove(const Comparable & x, node * & t);

	int getHeight(node *t);
	bool isBalanced(node* root);

	node * findMin(node *t) const;
	node * findMax(node *t) const;

	bool contains(const Comparable & x, node *t) const;
	void makeEmpty(node * & t);
	void printTree(node *t, std::ostream & out) const;
	int getLeafCount(node* node);
	int getNodeCount(node* node);
	int getFullNodes(node* node);

	node * clone(node *t) const;
public:
	bool isBalanced() { return isBalanced(root); }

	struct node* newNode(int data)
	{
		struct node*node = (struct node*)
			malloc(sizeof(struct node));

		node->data = data;
		node->left = nullptr;
		node->right = nullptr;

		return(node);
	}
};

/**
* Internal method to test if an item is in a subtree.
* x is item to search for. 4 * t is the node that roots the subtree.
*/
template <typename Comparable>
bool BinarySearchTree<Comparable>::contains(const Comparable & x, BinaryNode *t) const
{
	if (t == NULL)
		return false;
	else if (x < t->element)
		return contains(x, t->left);
	else if (t->element < x)
		return contains(x, t->right);
	else
		return true; // Match 
}

/**
* Internal method to find the smallest item in a subtree t.
* Return node containing the smallest item. 4 */
template <typename Comparable>
typename BinarySearchTree<Comparable>::BinaryNode * BinarySearchTree<Comparable>::findMin(BinaryNode *t) const
{
	if (t == NULL)
		return NULL;
	if (t->left == NULL)
		return t;
	return findMin(t->left);
}

/**
* Internal method to find the largest item in a subtree t.
* Return node containing the largest item.
*/
template <typename Comparable>
typename BinarySearchTree<Comparable>::BinaryNode * BinarySearchTree<Comparable>::findMax(BinaryNode *t) const
{
	if (t != NULL)
		while (t->right != NULL)
			t = t->right;
	return t;
}

/**
* Internal method to insert into a subtree.
* x is the item to insert.
* t is the node that roots the subtree.
* Set the new root of the subtree.
*/
template <typename Comparable>
void BinarySearchTree<Comparable>::insert(const Comparable & x, BinaryNode *&t)
{
	if (t == NULL)
		t = new BinaryNode(x, NULL, NULL);
	else if (x < t->element)
		insert(x, t->left);
	else if (t->element < x)
		insert(x, t->right);
	else
		; // Duplicate; do nothing
}
/**
* Internal method to insert into a subtree.
* x is the item to insert by moving.
* t is the node that roots the subtree.
* Set the new root of the subtree.
*/
template <typename Comparable>
void BinarySearchTree<Comparable>::insert(Comparable && x, BinaryNode *&t)
{
	if (t == NULL)
		t = new BinaryNode(std::move(x), NULL, NULL);
	else if (x < t->element)
		insert(std::move(x), t->left);
	else if (t->element < x)
		insert(std::move(x), t->right);
	else
		; // Duplicate; do nothing 35
}

/**
* Internal method to remove from a subtree.
* x is the item to remove.
* t is the node that roots the subtree.
* Set the new root of the subtree.
*/
template <typename Comparable>
void BinarySearchTree<Comparable>::remove(const Comparable & x, BinaryNode *&t)
{
	if (t == NULL)
		return; // Item not found; do nothing
	if (x < t->element)
		remove(x, t->left);
	else if (t->element < x)
		remove(x, t->right);
	else if (t->left != NULL && t->right != NULL) // Two children
	{
		t->element = findMin(t->right)->element;
		remove(t->element, t->right);
	}
	else
	{
		BinaryNode *oldNode = t;
		t = (t->left != NULL) ? t->left : t->right;
		delete oldNode;
	}
}

/**
* Internal method to make subtree empty.
*/
template <typename Comparable>
void BinarySearchTree<Comparable>::makeEmpty(BinaryNode * & t)
{
	if (t != NULL)
	{
		makeEmpty(t->left);
		makeEmpty(t->right);
		delete t;
	}
	t = NULL;
}



/**
* Internal method to clone subtree.
*/
template <typename Comparable>
typename BinarySearchTree<Comparable>::BinaryNode * BinarySearchTree<Comparable>::clone(BinaryNode *t) const
{
	if (t == NULL)
		return NULL;
	else
		return new BinaryNode(t->element, clone(t->left), clone(t->right));
}

/*
* Print the tree contents in sorted order.
*/
template <typename Comparable>
void BinarySearchTree<Comparable>::printTree(std::ostream & out) const
{
	if (isEmpty())
		out << "Empty tree" << std::endl;
	else
		printTree(root, out);
}

/**
* Internal method to print a subtree rooted at t in sorted order.
*/
template <typename Comparable>
void BinarySearchTree<Comparable>::printTree(BinaryNode *t, std::ostream & out) const
{
	if (t != NULL)
	{
		printTree(t->left, out);
		out << t->element << std::endl;
		printTree(t->right, out);
	}
}
template <typename Comparable>
int BinarySearchTree<Comparable>::getHeight(BinaryNode *t)
{
	if (t == NULL)
		return -1;
	else
		return 1 + max(getHeight(t->left), getHeight(t->right));
}

template <typename Comparable>
bool BinarySearchTree<Comparable>::isBalanced(BinaryNode* root)
{
	if (root == NULL)
	{
		return true;
	}

	int leftSide = getHeight(root->left);
	int rightSide = getHeight(root->right);
	int heightAbsolute = abs(leftSide - rightSide);

	if (heightAbsolute < 2 && isBalanced(root->left) && isBalanced(root->right))
		return true;
	return false;
}

template <typename Comparable>
int BinarySearchTree<Comparable>::getLeafCount(node* node)
{
	if (node == nullptr)
		return 0;
	else if (node->left == nullptr && node->right == nullptr)
		return 1;
	else
		return getLeafCount(node->left) + getLeafCount(node->right);
}

template <typename Comparable>
int BinarySearchTree<Comparable>::getNodeCount(node* node) {
	if (node == nullptr || (node->left == nullptr && node->right == nullptr))
		return 0;
	else
		return getNodeCount(node->left) + getNodeCount(node->right) + 1;
}

template <typename Comparable>
int BinarySearchTree<Comparable>::getFullNodes(node* node) {
	if (node == nullptr || (node->left == nullptr && node->right == nullptr))
		return 0;
	else if (node->left != nullptr && node->right != nullptr)
		return getFullNodes(node->left) + getFullNodes(node->right) + 1;
	else
		return getFullNodes(node->left) + getFullNodes(node->right);
}


/**
*      root
*       /\
*   left  right
*    /\
*left  right
* return
*/

TEST(test1, test)
{
	struct node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);

	printf("Leaf count of tree is %d\n", getLeafCount(root));
	printf("Node count of tree is %d\n", getNodeCount(root));
	printf("There are %d full nodes in tree\n", getFullNodes(root));
}

int main(int argc, char *argv[]) {
	testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}

/*
[----------] 1 test from test1
[ RUN      ] test1.test
Leaf count of tree is 3
Node count of tree is 2
There are 2 full nodes in tree
[       OK ] test1.test (0 ms)
[----------] 1 test from test1 (0 ms total)

[----------] Global test environment tear-down
[==========] 3 tests from 2 test cases ran. (0 ms total)
[  PASSED  ] 3 tests.
Program ended with exit code: 0
*/
